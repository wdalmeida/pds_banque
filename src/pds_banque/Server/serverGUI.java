package pds_banque.Server;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.simple.parser.ParseException;
import static pds_banque.Json.JsonDecoding.decodeCustomer;
import static pds_banque.Json.JsonDecoding.decodeLoginConsultant;

/**
 *
 * @author Florian
 */
//THIS CLASS IS MADNESS DON T EVEN THINK ABOUT USING IT. LIKE, FOR REAL.
public class serverGUI extends javax.swing.JFrame {

    /**
     * Creates new form serverGUI
     */
    public serverGUI() {
        this.server = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    System.err.println("Lancement du serveur d'insertion:");
                    launchServer(3001, 3000);
                    System.err.println("Serveur d'insertion lanc√©");
                } catch (IOException ex) {
                    Logger.getLogger(serverGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {

                }
            }
        });
        initComponents();
    }

    public static void launchServer(int portInsert, int portSelect) throws IOException, FileNotFoundException, ParseException {
        ServerSocket socketInsert = new ServerSocket(portInsert);
        String inputClientInsert;
        ServerSocket socketSelect = new ServerSocket(portSelect);
        String donneesEntreeClientSelect;

        while (1 == 1) {
            Socket connectionSocketSelect = socketSelect.accept();
            BufferedReader inputFromClientSelect = new BufferedReader(new InputStreamReader(connectionSocketSelect.getInputStream()));
            DataOutputStream outputToClientSelect = new DataOutputStream(connectionSocketSelect.getOutputStream());
            donneesEntreeClientSelect = inputFromClientSelect.readLine();
            System.out.println("Donnees recues par le serveur: " + donneesEntreeClientSelect);
            Object obj = donneesEntreeClientSelect;
            //decodageCustomer(obj);
            String resultFromSelect = AccessDB_server.sendQueryRequest(decodeLoginConsultant(donneesEntreeClientSelect));

            outputToClientSelect.writeBytes(resultFromSelect + '\n');
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            Socket connectionSocketInsert = socketInsert.accept();
            BufferedReader InputFromClientInsert = new BufferedReader(new InputStreamReader(connectionSocketInsert.getInputStream()));
            DataOutputStream outputToClient = new DataOutputStream(connectionSocketInsert.getOutputStream());

            inputClientInsert = InputFromClientInsert.readLine();
            System.out.println("Donnees recues par le serveur: " + inputClientInsert);
            Object objectInpuClientInsert = inputClientInsert;

            AccessDB_server.sendUpdateRequest(decodeCustomer(objectInpuClientInsert));

            //sortieVersClient.writeBytes("Requete effectuee" + '\n');
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }

    }

    Thread server;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Stop");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jButton1)
                        .addGap(68, 68, 68)
                        .addComponent(jButton2)
                        .addContainerGap(133, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap(146, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton1)
                                .addComponent(jButton2))
                        .addGap(131, 131, 131))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        server.start();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        server.stop();

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new serverGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
